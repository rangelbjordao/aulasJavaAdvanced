@baseUrl = http://localhost:8080

### 1Ô∏è‚É£ Listar produtos iniciais (do data.sql, IDs 1 a 5)
GET {{baseUrl}}/produtos

### 2Ô∏è‚É£ Adicionar produto 1 (Notebook)
POST {{baseUrl}}/produtos
Content-Type: application/json

{
  "nome": "Notebook",
  "preco": 4500.00
}

### 3Ô∏è‚É£ Adicionar produto 2 (Smartphone)
POST {{baseUrl}}/produtos
Content-Type: application/json

{
  "nome": "Smartphone",
  "preco": 2500.00
}

### 4Ô∏è‚É£ Listar todos os produtos (deve retornar produtos do data.sql + 6 e 7)
GET {{baseUrl}}/produtos

### 5Ô∏è‚É£ Buscar produto por ID (Notebook, ID 6)
GET {{baseUrl}}/produtos/6

### 6Ô∏è‚É£ Buscar produto por ID (Smartphone, ID 7)
GET {{baseUrl}}/produtos/7

### 7Ô∏è‚É£ Atualizar produto 6 (Notebook -> Notebook Gamer)
PUT {{baseUrl}}/produtos/6
Content-Type: application/json

{
  "nome": "Notebook Gamer",
  "preco": 5000.00
}

### 8Ô∏è‚É£ Buscar produto 6 atualizado para conferir
GET {{baseUrl}}/produtos/6

### 9Ô∏è‚É£ Remover produto 7 (Smartphone)
DELETE {{baseUrl}}/produtos/7

### üîü Listar produtos novamente (deve conter apenas produto 6 + produtos do data.sql)
GET {{baseUrl}}/produtos

### 1Ô∏è‚É£1Ô∏è‚É£ Teste de erro: buscar produto inexistente
GET {{baseUrl}}/produtos/999

### 1Ô∏è‚É£2Ô∏è‚É£ Teste de erro: atualizar produto inexistente
PUT {{baseUrl}}/produtos/999
Content-Type: application/json

{
  "nome": "Produto Fantasma",
  "preco": 1000.00
}

### 1Ô∏è‚É£3Ô∏è‚É£ Teste de erro: remover produto inexistente
DELETE {{baseUrl}}/produtos/999

### 1Ô∏è‚É£4Ô∏è‚É£ Teste de valida√ß√£o: adicionar produto sem nome
POST {{baseUrl}}/produtos
Content-Type: application/json

{
  "nome": "",
  "preco": 1500.00
}

### 1Ô∏è‚É£5Ô∏è‚É£ Teste de valida√ß√£o: adicionar produto sem pre√ßo
POST {{baseUrl}}/produtos
Content-Type: application/json

{
  "nome": "Produto Sem Pre√ßo",
  "preco": null
}
